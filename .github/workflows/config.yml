name: Build and Test
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  ubuntu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#using-environment-variables-in-a-matrix
    strategy:
      fail-fast: false
      matrix:
       include:
         # NOTE: If this is not quoted, the yaml parser will convert 7.0 to the number 7,
         # and the docker image `php:7` is the latest minor version of php 7.x (7.4).
         - PHP_VERSION: '8.0'
           PHP_VERSION_FULL: 8.0.22
         - PHP_VERSION: '8.0'
           PHP_VERSION_FULL: 8.0.22
           DOCKER_ARCHITECTURE: i386
         - PHP_VERSION: '8.1'
           PHP_VERSION_FULL: 8.1.11
         - PHP_VERSION: '8.2.0RC5'
           PHP_VERSION_FULL: 8.2.0RC5
         - PHP_VERSION: '8.2.0RC5'
           PHP_VERSION_FULL: 8.2.0RC5
           DOCKER_ARCHITECTURE: i386

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Build and test in docker
        run: bash ci/test_dockerized.sh ${{ matrix.PHP_VERSION }} ${{ matrix.DOCKER_ARCHITECTURE }}

      # We reuse the php base image because
      # 1. It has any necessary dependencies installed for php 7.0-8.2
      # 2. It is already downloaded
      #
      # We need to install valgrind then rebuild php from source with the configure option '--with-valgrind' to avoid valgrind false positives
      # because php-src has inline assembly that causes false positives in valgrind when that option isn't used.
      - name: Build and test in docker again with valgrind
        run: bash ci/test_dockerized_valgrind.sh ${{ matrix.PHP_VERSION }} ${{ matrix.PHP_VERSION_FULL }} ${{ matrix.DOCKER_ARCHITECTURE }}
      # NOTE: tests report false positives for zend_string_equals in php 7.3+
      # due to the use of inline assembly in php-src. (not related to igbinary)
  windows:
    defaults:
      run:
        shell: cmd
    strategy:
      matrix:
          version: ["8.0", "8.1", "8.2"]
          arch: [x64]
          ts: [nts, ts]
    runs-on: windows-latest
    steps:
      - name: Checkout immutable_cache
        uses: actions/checkout@v2
      - name: Setup PHP
        id: setup-php
        uses: cmb69/setup-php-sdk@v0.6
        with:
          version: ${{matrix.version}}
          arch: ${{matrix.arch}}
          ts: ${{matrix.ts}}
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{matrix.arch}}
          toolset: ${{steps.setup-php.outputs.toolset}}
      - name: phpize
        run: phpize
      - name: configure
        run: configure --enable-immutable-cache --enable-debug-pack --with-prefix=${{steps.setup-php.outputs.prefix}}
      - name: make
        run: nmake
      - name: test
        run: nmake test TESTS="--show-diff tests"
      - name: package
        run: |
          md .install
          copy LICENSE .install
          if exist x64 (
            if exist x64\Release (set prefix=x64\Release) else set prefix=x64\Release_TS
          ) else (
            if exist Release (set prefix=Release) else set prefix=Release_TS
          )
          copy %prefix%\php_immutable_cache.dll .install
          copy %prefix%\php_immutable_cache.pdb .install
#     - name: Upload artifacts
#       uses: actions/upload-artifact@v2
#       with:
#         name: immutable_cache-${{matrix.version}}-${{matrix.arch}}-${{matrix.ts}}
#         path: .install
